{"ast":null,"code":"var _jsxFileName = \"F:\\\\otp\\\\src\\\\components\\\\OTP.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from \"react\";\nimport \"../index.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function OTP({\n  otpLength = 6\n}) {\n  _s();\n  const [otpFields, setOtpFields] = useState(new Array(otpLength).fill(\"\"));\n  const ref = useRef([]);\n  function handleKeyDown(e, index) {\n    const key = e.key; // This tells us which keyboard key has been pressed\n    // console.log(key, e);\n\n    if (key === \"ArrowLeft\") {\n      if (index > 0) ref.current[index - 1].focus();\n      return;\n    }\n    if (key === \"ArrowRight\") {\n      if (index + 1 < otpFields.length) ref.current[index + 1].focus();\n      return;\n    }\n\n    // Make a copt of the current array\n    const copyOtpFields = [...otpFields];\n\n    // Let's check if the key is backspace\n    // and delete the digit in that scenario\n    if (key === \"Backspace\") {\n      copyOtpFields[index] = \"\";\n      setOtpFields(copyOtpFields);\n      if (index > 0) ref.current[index - 1].focus();\n    }\n\n    // We should allow single digit entry only\n    if (!/^\\d$/.test(key)) {\n      // We check if the pressed key is not a number\n      // we simply return from this function\n      // as only numbers are allowed!\n      return;\n    }\n    copyOtpFields[index] = key;\n    setOtpFields(copyOtpFields);\n\n    // use ref to focus on the next input box when an input is done\n    if (index + 1 < otpFields.length) ref.current[index + 1].focus();\n  }\n  function handlePaste(e) {\n    var _ref$current$nextFocu;\n    e.preventDefault();\n    const pastedData = e.clipboardData.getData(\"text\");\n    const digits = pastedData.match(/\\d/g); // We are using this regex to extract the digits from the pasted data\n\n    if (!digits) return;\n    const nextOtp = otpFields.slice();\n\n    // In  our current implementation\n    // we will always paste from the beginning!!\n    for (let i = 0; i < otpLength && digits.length; ++i) {\n      nextOtp[i] = digits[i];\n    }\n    setOtpFields(nextOtp);\n    const nextFocus = digits.length < otpLength ? digits.length : otpLength - 1;\n    (_ref$current$nextFocu = ref.current[nextFocus]) === null || _ref$current$nextFocu === void 0 ? void 0 : _ref$current$nextFocu.focus();\n  }\n  useEffect(() => {\n    var _ref$current$;\n    (_ref$current$ = ref.current[0]) === null || _ref$current$ === void 0 ? void 0 : _ref$current$.focus();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluild\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"otpHeader\",\n      className: \"text-primary\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fab fa-react fa-5x\",\n        id: \"react-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 52\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          class: \"bi bi-building-exclamation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 110\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 104\n      }, this), \" ENTER OTP\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), otpFields.map((value, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: currentInput => ref.current[index] = currentInput,\n      value: value,\n      type: \"text\",\n      maxLength: 1,\n      className: \"otp-input\",\n      onKeyDown: e => handleKeyDown(e, index),\n      onPaste: handlePaste\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(OTP, \"kMiJY26Iaj7ZFakjjDiuEVkZNw0=\");\n_c = OTP;\nvar _c;\n$RefreshReg$(_c, \"OTP\");","map":{"version":3,"names":["useState","useRef","useEffect","jsxDEV","_jsxDEV","OTP","otpLength","_s","otpFields","setOtpFields","Array","fill","ref","handleKeyDown","e","index","key","current","focus","length","copyOtpFields","test","handlePaste","_ref$current$nextFocu","preventDefault","pastedData","clipboardData","getData","digits","match","nextOtp","slice","i","nextFocus","_ref$current$","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","class","map","value","currentInput","type","maxLength","onKeyDown","onPaste","_c","$RefreshReg$"],"sources":["F:/otp/src/components/OTP.jsx"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\r\nimport \"../index.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nexport default function OTP({ otpLength = 6 }) {\r\n  const [otpFields, setOtpFields] = useState(new Array(otpLength).fill(\"\"));\r\n  const ref = useRef([]);\r\n\r\n  function handleKeyDown(e, index) {\r\n    const key = e.key; // This tells us which keyboard key has been pressed\r\n    // console.log(key, e);\r\n\r\n    if (key === \"ArrowLeft\") {\r\n      if (index > 0) ref.current[index - 1].focus();\r\n      return;\r\n    }\r\n\r\n    if (key === \"ArrowRight\") {\r\n      if (index + 1 < otpFields.length) ref.current[index + 1].focus();\r\n      return;\r\n    }\r\n\r\n    // Make a copt of the current array\r\n    const copyOtpFields = [...otpFields];\r\n\r\n    // Let's check if the key is backspace\r\n    // and delete the digit in that scenario\r\n    if (key === \"Backspace\") {\r\n      copyOtpFields[index] = \"\";\r\n      setOtpFields(copyOtpFields);\r\n\r\n      if (index > 0) ref.current[index - 1].focus();\r\n    }\r\n\r\n    // We should allow single digit entry only\r\n    if (!/^\\d$/.test(key)) {\r\n      // We check if the pressed key is not a number\r\n      // we simply return from this function\r\n      // as only numbers are allowed!\r\n      return;\r\n    }\r\n\r\n    copyOtpFields[index] = key;\r\n    setOtpFields(copyOtpFields);\r\n\r\n    // use ref to focus on the next input box when an input is done\r\n    if (index + 1 < otpFields.length) ref.current[index + 1].focus();\r\n  }\r\n\r\n  function handlePaste(e) {\r\n    e.preventDefault();\r\n\r\n    const pastedData = e.clipboardData.getData(\"text\");\r\n    const digits = pastedData.match(/\\d/g); // We are using this regex to extract the digits from the pasted data\r\n\r\n    if (!digits) return;\r\n\r\n    const nextOtp = otpFields.slice();\r\n\r\n    // In  our current implementation\r\n    // we will always paste from the beginning!!\r\n    for (let i = 0; i < otpLength && digits.length; ++i) {\r\n      nextOtp[i] = digits[i];\r\n    }\r\n    setOtpFields(nextOtp);\r\n\r\n    const nextFocus = digits.length < otpLength ? digits.length : otpLength - 1;\r\n    ref.current[nextFocus]?.focus();\r\n  }\r\n\r\n  useEffect(() => {\r\n    ref.current[0]?.focus();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container-fluild\">\r\n      <h1 id=\"otpHeader\" className=\"text-primary\"> <i className=\"fab fa-react fa-5x\" id=\"react-logo\" /><span><i class=\"bi bi-building-exclamation\"></i></span> ENTER OTP</h1>\r\n      {otpFields.map((value, index) => (\r\n        <input\r\n          key={index}\r\n          ref={(currentInput) => (ref.current[index] = currentInput)}\r\n          value={value}\r\n          type=\"text\"\r\n          maxLength={1}\r\n          className=\"otp-input\"\r\n          onKeyDown={(e) => handleKeyDown(e, index)}\r\n          onPaste={handlePaste}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}