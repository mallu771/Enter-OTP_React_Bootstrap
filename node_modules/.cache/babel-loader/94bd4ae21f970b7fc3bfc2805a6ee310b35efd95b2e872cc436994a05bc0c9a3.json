{"ast":null,"code":"var _jsxFileName = \"F:\\\\otp\\\\src\\\\components\\\\OTP.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function OTP({\n  otpLength = 6\n}) {\n  _s();\n  const [otpFields, setOtpFields] = useState(new Array(otpLength).fill(\"\"));\n  const ref = useRef([]);\n  function handleKeyDown(e, index) {\n    const key = e.key; // This tells us which keyboard key has been pressed\n    console.log(key, e);\n    // Make a copt of the current array\n    const copyOtpFields = [...otpFields];\n\n    // Let's check if the key is backspace\n    // and delete the digit in that scenario\n    if (key === \"Backspace\") {\n      copyOtpFields[index] = \"\";\n      setOtpFields(copyOtpFields);\n      if (index > 0) ref.current[index - 1].focus();\n    }\n\n    // We should allow single digit entry only\n    if (!/^\\d$/.test(key)) {\n      // We check if the pressed key is not a number\n      // we simply return from this function\n      // as only numbers are allowed!\n      return;\n    }\n    copyOtpFields[index] = key;\n    setOtpFields(copyOtpFields);\n\n    // use ref to focus on the next input box when an input is done\n    if (index + 1 < otpFields.length) ref.current[index + 1].focus();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: otpFields.map((value, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: currentInput => ref.current[index] = currentInput,\n      value: value,\n      type: \"text\",\n      maxLength: 1,\n      className: \"otp-input\",\n      onKeyDown: e => handleKeyDown(e, index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(OTP, \"mb2sFAkroe7YQx7kyJPKaOKHA9k=\");\n_c = OTP;\nvar _c;\n$RefreshReg$(_c, \"OTP\");","map":{"version":3,"names":["useState","useRef","jsxDEV","_jsxDEV","OTP","otpLength","_s","otpFields","setOtpFields","Array","fill","ref","handleKeyDown","e","index","key","console","log","copyOtpFields","current","focus","test","length","className","children","map","value","currentInput","type","maxLength","onKeyDown","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/otp/src/components/OTP.jsx"],"sourcesContent":["import { useState, useRef } from \"react\";\r\n\r\nexport default function OTP({ otpLength = 6 }) {\r\n  const [otpFields, setOtpFields] = useState(new Array(otpLength).fill(\"\"));\r\n  const ref = useRef([]);\r\n  function handleKeyDown(e, index) {\r\n    const key = e.key; // This tells us which keyboard key has been pressed\r\n    console.log(key, e);\r\n    // Make a copt of the current array\r\n    const copyOtpFields = [...otpFields];\r\n\r\n    // Let's check if the key is backspace\r\n    // and delete the digit in that scenario\r\n    if (key === \"Backspace\") {\r\n      copyOtpFields[index] = \"\";\r\n      setOtpFields(copyOtpFields);\r\n\r\n      if (index > 0) ref.current[index - 1].focus();\r\n    }\r\n\r\n    // We should allow single digit entry only\r\n    if (!/^\\d$/.test(key)) {\r\n      // We check if the pressed key is not a number\r\n      // we simply return from this function\r\n      // as only numbers are allowed!\r\n      return;\r\n    }\r\n\r\n    copyOtpFields[index] = key;\r\n    setOtpFields(copyOtpFields);\r\n\r\n    // use ref to focus on the next input box when an input is done\r\n    if (index + 1 < otpFields.length) ref.current[index + 1].focus();\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {otpFields.map((value, index) => (\r\n        <input\r\n          key={index}\r\n          ref={(currentInput) => (ref.current[index] = currentInput)}\r\n          value={value}\r\n          type=\"text\"\r\n          maxLength={1}\r\n          className=\"otp-input\"\r\n          onKeyDown={(e) => handleKeyDown(e, index)}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,eAAe,SAASC,GAAGA,CAAC;EAAEC,SAAS,GAAG;AAAE,CAAC,EAAE;EAAAC,EAAA;EAC7C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAIS,KAAK,CAACJ,SAAS,CAAC,CAACK,IAAI,CAAC,EAAE,CAAC,CAAC;EACzE,MAAMC,GAAG,GAAGV,MAAM,CAAC,EAAE,CAAC;EACtB,SAASW,aAAaA,CAACC,CAAC,EAAEC,KAAK,EAAE;IAC/B,MAAMC,GAAG,GAAGF,CAAC,CAACE,GAAG,CAAC,CAAC;IACnBC,OAAO,CAACC,GAAG,CAACF,GAAG,EAAEF,CAAC,CAAC;IACnB;IACA,MAAMK,aAAa,GAAG,CAAC,GAAGX,SAAS,CAAC;;IAEpC;IACA;IACA,IAAIQ,GAAG,KAAK,WAAW,EAAE;MACvBG,aAAa,CAACJ,KAAK,CAAC,GAAG,EAAE;MACzBN,YAAY,CAACU,aAAa,CAAC;MAE3B,IAAIJ,KAAK,GAAG,CAAC,EAAEH,GAAG,CAACQ,OAAO,CAACL,KAAK,GAAG,CAAC,CAAC,CAACM,KAAK,CAAC,CAAC;IAC/C;;IAEA;IACA,IAAI,CAAC,MAAM,CAACC,IAAI,CAACN,GAAG,CAAC,EAAE;MACrB;MACA;MACA;MACA;IACF;IAEAG,aAAa,CAACJ,KAAK,CAAC,GAAGC,GAAG;IAC1BP,YAAY,CAACU,aAAa,CAAC;;IAE3B;IACA,IAAIJ,KAAK,GAAG,CAAC,GAAGP,SAAS,CAACe,MAAM,EAAEX,GAAG,CAACQ,OAAO,CAACL,KAAK,GAAG,CAAC,CAAC,CAACM,KAAK,CAAC,CAAC;EAClE;EAEA,oBACEjB,OAAA;IAAKoB,SAAS,EAAC,WAAW;IAAAC,QAAA,EACvBjB,SAAS,CAACkB,GAAG,CAAC,CAACC,KAAK,EAAEZ,KAAK,kBAC1BX,OAAA;MAEEQ,GAAG,EAAGgB,YAAY,IAAMhB,GAAG,CAACQ,OAAO,CAACL,KAAK,CAAC,GAAGa,YAAc;MAC3DD,KAAK,EAAEA,KAAM;MACbE,IAAI,EAAC,MAAM;MACXC,SAAS,EAAE,CAAE;MACbN,SAAS,EAAC,WAAW;MACrBO,SAAS,EAAGjB,CAAC,IAAKD,aAAa,CAACC,CAAC,EAAEC,KAAK;IAAE,GANrCA,KAAK;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAOX,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC5B,EAAA,CAhDuBF,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}