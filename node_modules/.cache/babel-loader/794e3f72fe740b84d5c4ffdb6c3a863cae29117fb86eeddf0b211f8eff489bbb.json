{"ast":null,"code":"var _jsxFileName = \"F:\\\\otp\\\\src\\\\components\\\\OTP.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function OTP({\n  otpLength = 6\n}) {\n  _s();\n  const [otpFields, setOtpFields] = useState(new Array(otpLength).fill(\"\"));\n  function handleKeyDown(e, index) {\n    const key = e.key; // This tells us which keyboard key has been pressed\n    console.log(key, e);\n    // Make a copt of the current array\n    const copyOtpFields = [...otpFields];\n    // We should allow single digit entry only if (!/^\\d$/.test(key)) { // We check if the pressed key is not a number // we simply return from this function // as only numbers are allowed! return; } copyOtpFields[index] = key; setOtpFields(copyOtpFields);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: otpFields.map((value, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n      value: value,\n      type: \"text\",\n      maxLength: 1,\n      className: \"otp-input\",\n      onKeyDown: e => handleKeyDown(e, index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 1\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 1\n  }, this);\n}\n_s(OTP, \"Xnlgj8OWNcvMlxeeeyA0Q8IZnF0=\");\n_c = OTP;\nvar _c;\n$RefreshReg$(_c, \"OTP\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","OTP","otpLength","_s","otpFields","setOtpFields","Array","fill","handleKeyDown","e","index","key","console","log","copyOtpFields","className","children","map","value","type","maxLength","onKeyDown","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/otp/src/components/OTP.jsx"],"sourcesContent":["import { useState } from \"react\"; export default function OTP({ otpLength = 6 }) {\r\nconst [otpFields, setOtpFields] = useState(new Array(otpLength).fill(\"\")); function handleKeyDown(e, index) {\r\nconst key = e.key; // This tells us which keyboard key has been pressed\r\nconsole.log(key, e);\r\n// Make a copt of the current array\r\nconst copyOtpFields = [...otpFields];\r\n// We should allow single digit entry only if (!/^\\d$/.test(key)) { // We check if the pressed key is not a number // we simply return from this function // as only numbers are allowed! return; } copyOtpFields[index] = key; setOtpFields(copyOtpFields);\r\n} return (\r\n<div className=\"container\">\r\n{otpFields.map((value, index) => (\r\n<input\r\nkey={index}\r\nvalue={value}\r\ntype=\"text\"\r\nmaxLength={1}\r\nclassName=\"otp-input\"\r\nonKeyDown={(e) => handleKeyDown(e, index)}\r\n/>\r\n))}\r\n</div>\r\n);\r\n}"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAC,eAAe,SAASC,GAAGA,CAAC;EAAEC,SAAS,GAAG;AAAE,CAAC,EAAE;EAAAC,EAAA;EACjF,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAIQ,KAAK,CAACJ,SAAS,CAAC,CAACK,IAAI,CAAC,EAAE,CAAC,CAAC;EAAE,SAASC,aAAaA,CAACC,CAAC,EAAEC,KAAK,EAAE;IAC5G,MAAMC,GAAG,GAAGF,CAAC,CAACE,GAAG,CAAC,CAAC;IACnBC,OAAO,CAACC,GAAG,CAACF,GAAG,EAAEF,CAAC,CAAC;IACnB;IACA,MAAMK,aAAa,GAAG,CAAC,GAAGV,SAAS,CAAC;IACpC;EACA;EAAE,oBACFJ,OAAA;IAAKe,SAAS,EAAC,WAAW;IAAAC,QAAA,EACzBZ,SAAS,CAACa,GAAG,CAAC,CAACC,KAAK,EAAER,KAAK,kBAC5BV,OAAA;MAEAkB,KAAK,EAAEA,KAAM;MACbC,IAAI,EAAC,MAAM;MACXC,SAAS,EAAE,CAAE;MACbL,SAAS,EAAC,WAAW;MACrBM,SAAS,EAAGZ,CAAC,IAAKD,aAAa,CAACC,CAAC,EAAEC,KAAK;IAAE,GALrCA,KAAK;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMT,CACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEN;AAACtB,EAAA,CArByDF,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}